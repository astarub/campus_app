// Mocks generated by Mockito 5.4.5 from annotations
// in campus_app/test/pages/calendar/calendar_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:campus_app/core/failures.dart' as _i6;
import 'package:campus_app/pages/calendar/calendar_datasource.dart' as _i2;
import 'package:campus_app/pages/calendar/calendar_repository.dart' as _i4;
import 'package:campus_app/pages/calendar/entities/event_entity.dart' as _i7;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCalendarDatasource_0 extends _i1.SmartFake
    implements _i2.CalendarDatasource {
  _FakeCalendarDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CalendarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarRepository extends _i1.Mock
    implements _i4.CalendarRepository {
  MockCalendarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CalendarDatasource get calendarDatasource => (super.noSuchMethod(
        Invocation.getter(#calendarDatasource),
        returnValue: _FakeCalendarDatasource_0(
          this,
          Invocation.getter(#calendarDatasource),
        ),
      ) as _i2.CalendarDatasource);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Event>>> getEvents(
          String? locale) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [locale],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Event>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Event>>(
          this,
          Invocation.method(
            #getEvents,
            [locale],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Event>>>);

  @override
  _i3.Either<_i6.Failure, List<_i7.Event>> getCachedEvents() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedEvents,
          [],
        ),
        returnValue: _FakeEither_1<_i6.Failure, List<_i7.Event>>(
          this,
          Invocation.method(
            #getCachedEvents,
            [],
          ),
        ),
      ) as _i3.Either<_i6.Failure, List<_i7.Event>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Event>>> updateSavedEvents(
          {_i7.Event? event}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSavedEvents,
          [],
          {#event: event},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Event>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Event>>(
          this,
          Invocation.method(
            #updateSavedEvents,
            [],
            {#event: event},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Event>>>);
}
